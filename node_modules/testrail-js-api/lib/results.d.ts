import type { TestRail } from "./api";
import type { Result, AddResult, AddResultForCase, AddMultipleResult } from "./interfaces";
export declare function getResults(this: TestRail, test_id: number, filters?: {
    defects_filter?: string;
    limit?: number;
    offset?: number;
    status_id?: number[];
}): Promise<{
    response: import("node-fetch").Response;
    value: Result[];
}>;
export declare function getResultsForCase(this: TestRail, run_id: number, case_id: number, filters?: {
    defects_filter?: string;
    limit?: number;
    offset?: number;
    status_id?: number[];
}): Promise<{
    response: import("node-fetch").Response;
    value: Result[];
}>;
export declare function getResultsForRun(this: TestRail, run_id: number, filters?: {
    created_after?: number;
    created_before?: number;
    created_by?: number[];
    defects_filter?: string;
    limit?: number;
    offset?: number;
    status_id?: number[];
}): Promise<{
    response: import("node-fetch").Response;
    value: Result[];
}>;
export declare function addResult(this: TestRail, test_id: number, data: AddResult): Promise<{
    response: import("node-fetch").Response;
    value: Result;
}>;
export declare function addResultForCase(this: TestRail, run_id: number, case_id: number, data: AddResult): Promise<{
    response: import("node-fetch").Response;
    value: Result;
}>;
export declare function addResults(this: TestRail, run_id: number, results: AddMultipleResult[]): Promise<{
    response: import("node-fetch").Response;
    value: Result[];
}>;
export declare function addResultsForCases(this: TestRail, run_id: number, results: AddResultForCase[]): Promise<{
    response: import("node-fetch").Response;
    value: Result[];
}>;
