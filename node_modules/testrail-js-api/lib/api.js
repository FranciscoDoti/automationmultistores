"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRail = void 0;
const querystring_1 = __importDefault(require("querystring"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const attachments_1 = require("./attachments");
const cases_1 = require("./cases");
const case_fields_1 = require("./case_fields");
const case_types_1 = require("./case_types");
const configurations_1 = require("./configurations");
const milestones_1 = require("./milestones");
const plans_1 = require("./plans");
const priorities_1 = require("./priorities");
const projects_1 = require("./projects");
const reports_1 = require("./reports");
const results_1 = require("./results");
const result_fields_1 = require("./result_fields");
const runs_1 = require("./runs");
const sections_1 = require("./sections");
const statuses_1 = require("./statuses");
const suites_1 = require("./suites");
const templates_1 = require("./templates");
const tests_1 = require("./tests");
const users_1 = require("./users");
const interfaces_1 = require("./interfaces");
class TestRail {
    constructor(host, user, apiKey, baseUrl = "/index.php?/api/v2/") {
        this._callAPI = async ({ method, apiUrl, body, options, }) => {
            let requestBody = body;
            if ((options === null || options === void 0 ? void 0 : options.requestType) !== 2) {
                requestBody = JSON.stringify(body);
            }
            let url = this.host + this.baseUrl + apiUrl;
            if (options === null || options === void 0 ? void 0 : options.queryVariables) {
                url += "&" + querystring_1.default.stringify(options.queryVariables);
            }
            let headers = {
                Authorization: this.authHeader,
            };
            if (options === null || options === void 0 ? void 0 : options.headers) {
                headers = {
                    ...headers,
                    ...options.headers,
                };
            }
            else if ((options === null || options === void 0 ? void 0 : options.requestType) !== 2) {
                headers = {
                    ...headers,
                    "Content-Type": "application/json",
                };
            }
            const response = await node_fetch_1.default(url, {
                method,
                body: requestBody,
                headers,
            });
            const contentType = response.headers.get("Content-Type");
            const contentLength = response.headers.get("Content-Length");
            let value;
            if (!contentLength || Number(contentLength) > 0) {
                if (contentType === null || contentType === void 0 ? void 0 : contentType.includes("application/json")) {
                    value = await response.json();
                }
                else if (contentType === null || contentType === void 0 ? void 0 : contentType.includes("text/plain")) {
                    value = await response.text();
                }
                else {
                    value = await response.blob();
                }
            }
            return {
                response,
                value,
            };
        };
        this.apiGet = (apiUrl, options) => {
            return this._callAPI({
                method: interfaces_1.HttpMethod.Get,
                apiUrl,
                options,
            });
        };
        this.apiPost = (apiUrl, body, options) => {
            return this._callAPI({
                method: interfaces_1.HttpMethod.Post,
                apiUrl,
                body,
                options,
            });
        };
        this.addAttachmentToPlan = attachments_1.addAttachmentToPlan;
        this.addAttachmentToPlanEntry = attachments_1.addAttachmentToPlanEntry;
        this.addAttachmentToResult = attachments_1.addAttachmentToResult;
        this.get_attachments_for_case = attachments_1.get_attachments_for_case;
        this.get_attachments_for_plan = attachments_1.get_attachments_for_plan;
        this.get_attachments_for_plan_entry = attachments_1.get_attachments_for_plan_entry;
        this.get_attachments_for_run = attachments_1.get_attachments_for_run;
        this.get_attachments_for_test = attachments_1.get_attachments_for_test;
        this.get_attachment = attachments_1.get_attachment;
        this.delete_attachment = attachments_1.delete_attachment;
        this.getCase = cases_1.getCase;
        this.getCases = cases_1.getCases;
        this.getHistoryForCase = cases_1.getHistoryForCase;
        this.addCase = cases_1.addCase;
        this.updateCase = cases_1.updateCase;
        this.updateCases = cases_1.updateCases;
        this.deleteCase = cases_1.deleteCase;
        this.deleteCases = cases_1.deleteCases;
        this.getCaseFields = case_fields_1.getCaseFields;
        this.add_case_field = case_fields_1.add_case_field;
        this.getCaseTypes = case_types_1.getCaseTypes;
        this.getConfigs = configurations_1.getConfigs;
        this.addConfigGroup = configurations_1.addConfigGroup;
        this.addConfig = configurations_1.addConfig;
        this.updateConfigGroup = configurations_1.updateConfigGroup;
        this.updateConfig = configurations_1.updateConfig;
        this.deleteConfigGroup = configurations_1.deleteConfigGroup;
        this.deleteConfig = configurations_1.deleteConfig;
        this.getMilestone = milestones_1.getMilestone;
        this.getMilestones = milestones_1.getMilestones;
        this.addMilestone = milestones_1.addMilestone;
        this.updateMilestone = milestones_1.updateMilestone;
        this.deleteMilestone = milestones_1.deleteMilestone;
        this.getPlan = plans_1.getPlan;
        this.getPlans = plans_1.getPlans;
        this.addPlan = plans_1.addPlan;
        this.addPlanEntry = plans_1.addPlanEntry;
        this.addRunToPlanEntry = plans_1.addRunToPlanEntry;
        this.updatePlan = plans_1.updatePlan;
        this.updatePlanEntry = plans_1.updatePlanEntry;
        this.updateRunInPlanEntry = plans_1.updateRunInPlanEntry;
        this.closePlan = plans_1.closePlan;
        this.deletePlan = plans_1.deletePlan;
        this.deletePlanEntry = plans_1.deletePlanEntry;
        this.deleteRunFromPlanEntry = plans_1.deleteRunFromPlanEntry;
        this.getPriorities = priorities_1.getPriorities;
        this.getProject = projects_1.getProject;
        this.getProjects = projects_1.getProjects;
        this.addProject = projects_1.addProject;
        this.updateProject = projects_1.updateProject;
        this.deleteProject = projects_1.deleteProject;
        this.getReports = reports_1.getReports;
        this.runReport = reports_1.runReport;
        this.getResults = results_1.getResults;
        this.getResultsForCase = results_1.getResultsForCase;
        this.getResultsForRun = results_1.getResultsForRun;
        this.addResult = results_1.addResult;
        this.addResultForCase = results_1.addResultForCase;
        this.addResults = results_1.addResults;
        this.addResultsForCases = results_1.addResultsForCases;
        this.getResultFields = result_fields_1.getResultFields;
        this.getRun = runs_1.getRun;
        this.getRuns = runs_1.getRuns;
        this.addRun = runs_1.addRun;
        this.updateRun = runs_1.updateRun;
        this.closeRun = runs_1.closeRun;
        this.deleteRun = runs_1.deleteRun;
        this.getSection = sections_1.getSection;
        this.getSections = sections_1.getSections;
        this.addSection = sections_1.addSection;
        this.updateSection = sections_1.updateSection;
        this.deleteSection = sections_1.deleteSection;
        this.getStatuses = statuses_1.getStatuses;
        this.getSuite = suites_1.getSuite;
        this.getSuites = suites_1.getSuites;
        this.addSuite = suites_1.addSuite;
        this.updateSuite = suites_1.updateSuite;
        this.deleteSuite = suites_1.deleteSuite;
        this.getTemplates = templates_1.getTemplates;
        this.getTest = tests_1.getTest;
        this.getTests = tests_1.getTests;
        this.getUser = users_1.getUser;
        this.getCurrentUser = users_1.getCurrentUser;
        this.getUserByEmail = users_1.getUserByEmail;
        this.getUsers = users_1.getUsers;
        this.host = host;
        this.baseUrl = baseUrl;
        this.authHeader =
            "Basic " + Buffer.from(user + ":" + apiKey).toString("base64");
    }
}
exports.TestRail = TestRail;
